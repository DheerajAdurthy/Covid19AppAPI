// <auto-generated />
using System;
using Covid19ProjectAPI.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Covid19ProjectAPI.Migrations
{
    [DbContext(typeof(RegisterDBContext))]
    partial class RegisterDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Covid19ProjectAPI.Entities.CasesInCities", b =>
                {
                    b.Property<int>("caseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("caseId"), 1L, 1);

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<string>("cityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("cured")
                        .HasColumnType("bit");

                    b.Property<string>("dateRegistered")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("inactiveOrdeath")
                        .HasColumnType("bit");

                    b.Property<string>("personName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("caseId");

                    b.HasIndex("cityId");

                    b.ToTable("casesInCities");
                });

            modelBuilder.Entity("Covid19ProjectAPI.Entities.Cities", b =>
                {
                    b.Property<string>("cityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("cityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("totalActiveCases")
                        .HasColumnType("float");

                    b.Property<double?>("totalCasesReported")
                        .HasColumnType("float");

                    b.Property<double?>("totalCuredCases")
                        .HasColumnType("float");

                    b.Property<double?>("totalDeaths")
                        .HasColumnType("float");

                    b.HasKey("cityId");

                    b.HasIndex("CountryId");

                    b.ToTable("cities");
                });

            modelBuilder.Entity("Covid19ProjectAPI.Entities.Countries", b =>
                {
                    b.Property<string>("countryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("countryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("totalActiveCases")
                        .HasColumnType("float");

                    b.Property<double?>("totalCasesReported")
                        .HasColumnType("float");

                    b.Property<double?>("totalCuredCases")
                        .HasColumnType("float");

                    b.Property<double?>("totalDeaths")
                        .HasColumnType("float");

                    b.HasKey("countryId");

                    b.ToTable("countries");
                });

            modelBuilder.Entity("Covid19ProjectAPI.Entities.LoginUserWishList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("loginUsers");
                });

            modelBuilder.Entity("Covid19ProjectAPI.Entities.RegisterUser", b =>
                {
                    b.Property<int>("registerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("registerId"), 1L, 1);

                    b.Property<string>("confirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("emailId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("registerId");

                    b.ToTable("registerUsers");
                });

            modelBuilder.Entity("Covid19ProjectAPI.Entities.Users", b =>
                {
                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Covid19ProjectAPI.Entities.WishList", b =>
                {
                    b.Property<int>("wishlistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("wishlistId"), 1L, 1);

                    b.Property<string>("UsersuserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("countryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("wishListCountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("wishlistId");

                    b.HasIndex("UsersuserId");

                    b.HasIndex("countryId");

                    b.ToTable("usersWishlist");
                });

            modelBuilder.Entity("Covid19ProjectAPI.Entities.CasesInCities", b =>
                {
                    b.HasOne("Covid19ProjectAPI.Entities.Cities", "Cities")
                        .WithMany()
                        .HasForeignKey("cityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Covid19ProjectAPI.Entities.Cities", b =>
                {
                    b.HasOne("Covid19ProjectAPI.Entities.Countries", "Countries")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Countries");
                });

            modelBuilder.Entity("Covid19ProjectAPI.Entities.WishList", b =>
                {
                    b.HasOne("Covid19ProjectAPI.Entities.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersuserId");

                    b.HasOne("Covid19ProjectAPI.Entities.Countries", "Countries")
                        .WithMany()
                        .HasForeignKey("countryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Countries");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
